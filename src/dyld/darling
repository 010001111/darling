#!/bin/sh
# 
# This file is part of Darling.
# 
# Copyright (C) 2015 Lubos Dolezel
# 
# Darling is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Darling is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Darling.  If not, see <http://www.gnu.org/licenses/>.
# 

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
DARLING_PREFIX=$(realpath "$SCRIPTPATH/..")
MINIMUM_PREFIX_VERSION="1"

check_prefix() {
    if [ ! -d "$DPREFIX" -o ! -f "$DPREFIX/.prefix-version" ]; then
        setup_prefix "$DPREFIX"
    fi

    if [ "$(cat $DPREFIX/.prefix-version)" -lt $MINIMUM_PREFIX_VERSION ]; then
        setup_prefix "$DPREFIX"
    fi
}

setup_prefix() {
    prefix_pkg="/tmp/prefix.$$.pkg"

    >&2 echo "Setting up prefix at $1"
    >&2 echo 

    mkdir -p "$1"
    rm -f "$1/darling-prefix"
    ln -s "system-root${DARLING_PREFIX}" "$1/darling-prefix"

    install_pkg "org.darlinghq.pkg.PrefixHierarchy"
    install_pkg "org.darlinghq.pkg.OpenSSLCertificates"

    >&2 echo "Prefix is ready."
}

install_pkg() {
    temp="/tmp/pkgs.$$"
    mkdir "$temp" || true

    >&2 echo "Getting latest version of $1..."
    version=$(wget "http://packages.darlinghq.org/${1}/latest.txt" -O- 2>/dev/null)
    pkgpath="$temp/${1}-${version}.pkg"

    >&2 echo "Downloading $1 (version $version)..."
    wget "http://packages.darlinghq.org/${1}/${1}-${version}.pkg" -O "$pkgpath" 2>/dev/null

    "${DARLING_PREFIX}/libexec/darling/usr/bin/installer" -pkg "/system-root${pkgpath}" -target /

    rm -rf "$temp"
}

darling_check() {
    # Returning values:
    # 0: module is loaded, file permissions are good
    # 1: module is loaded, file permissions are wrong
    # 2: module is not loaded
    grep -q darling_mach "/proc/modules"
    if [ $? -eq 0 ]; then
        [ -r "/dev/mach" -a -w "/dev/mach" ] && return 0 || return 1
    else
        return 2
    fi
}

darling_load() {
    if $(darling_check); then
        >&2 echo "Module is already loaded."
    else
        >&2 echo -n "Loading module... "
        modprobe darling-mach && >&2 echo "Done." || >&2 echo "Fail."
        sleep 1 # Wait for module loading
        chmod a+rw "/dev/mach"
    fi

}

darling_unload() {
    if $(darling_check); then
        >&2 echo -n "Unloading module... "
        modprobe -r darling-mach && >&2 echo "Done." || >&2 echo "Fail."
    else
        >&2 echo "Module is not loaded, so it can't be unloaded."
    fi
}

if [ $# -eq 0 ]; then
    >&2 echo "This is Darling, a runtime environment for OS X applications."
    >&2 echo
    >&2 echo "Copyright (C) 2012-2015 Lubos Dolezel"
    >&2 echo "Includes software components which are Copyright (C) Apple Computer, Inc. and many others."
    >&2 echo
    >&2 echo -e "Usage:\tdarling PROGRAM [ARGUMENTS...]\tRun the specified program" 
    >&2 echo -e "\tdarling shell\t\t\tStart bash shell in prefix"
    #>&2 echo -e "\tdarling hdiutil\t\t\tMount DMG disk images"
    #>&2 echo -e "\tdarling pkgutil\t\t\tInstall PKG packages"
    >&2 echo -e "\tdarling load\t\t\tLoad kernel module"
    >&2 echo -e "\tdarling unload\t\t\tUnload kernel module"
    >&2 echo
    >&2 echo "The prefix is specified by the DPREFIX environment variable."
    >&2 echo "The default DPREFIX is \$HOME/.darling"
    exit 1
fi

set -e

if [ -z "$DPREFIX" ]; then
    export DPREFIX="$HOME/.darling"
fi

if ! $(darling_check) && [ "$1" != "load" ]; then
    2>&1 echo "Cannot open /dev/mach. Try to run 'darling load' before."
    exit 1
fi

#dyld_path="${0%darling}dyld"
dyld_path="${DARLING_PREFIX}/bin/dyld"

case "$1" in
"shell")
    check_prefix

    if [ $# -gt 1 ]; then
        exec "${dyld_path}" "${DPREFIX}/bin/bash" -c "${*:2}"
    else
        exec "${dyld_path}" "${DPREFIX}/bin/bash" --norc
    fi
    ;;
#"hdiutil")
#    exec "${DPREFIX}/usr/bin/hdiutil" "${@:2}"
#    exit $?
#    ;;
#"pkgutil")
#    >2& echo "Not implemented yet"
#    exit 1
#    ;;
"load")
    if [ "$(id -u)" != 0 ]; then
        2>&1 echo "You need to be root for this command."
        exit 1
    fi

    darling_load
    ;;
"unload")
    if [ "$(id -u)" != 0 ]; then
        2>&1 echo "You need to be root for this command."
        exit 1
    fi

    darling_unload
    ;;
*)
    check_prefix
    exec "${dyld_path}" "$1" "${@:2}"
    ;;
esac
